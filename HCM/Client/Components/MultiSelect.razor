@using Microsoft.AspNetCore.Components;
@typeparam TItem

<div class="multi-select">
    <ul>
        @foreach (var item in Values)
        {
            <li class="chip">
                @DisplayFieldSelector?.Invoke(item)
                <span class="close" @onclick="(e => RemoveItem(e, item))">×</span>
            </li>
        }
        <li class="multi-select-input">
            <input type="search" placeholder="@Placeholder" @oninput="OnValueChanged" @bind="SearchText" @onfocus="OpenPopup" />
        </li>
    </ul>
    @if (Items != null && IsOpened)
    {
        <div class="dropdown">
            <div>
                <ul>
                    @foreach (var item in GetFilteredItems(SearchText))
                    {
                        <li @onclick="@(e => ItemClick(e, item))">
                            @(DisplayFieldSelector?.Invoke(item) ?? item?.ToString())
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

@code {

    private bool isOpened;
    private string searchText;

    protected override void OnInitialized()
    {
        Values = new List<TItem>();
    }

    protected void OpenPopup()
    {
        IsOpened = true;
    }

    protected void ClosePopup()
    {
        IsOpened = false;
    }

    /// <summary>
    /// The Search Text displayed in the TextField
    /// </summary>
    [Parameter]
    public string SearchText
    {
        get { return searchText; }
        set
        {
            searchText = value;
            OnTextChanged.InvokeAsync(value);
        }
    }

    public bool IsOpened
    {
        get { return isOpened; }
        set
        {
            isOpened = value;
            OnOpenedChanged.InvokeAsync(value);
            this.StateHasChanged();
        }
    }

    public void OnValueChanged(ChangeEventArgs ev)
    {
        Console.WriteLine(ev.Value);
        SearchText = (string)ev.Value;
        StateHasChanged();
    }

    /// <summary>
    /// OnOpenedChanged is fired when the popup dialog is opened or close and the parameter indicates whenever is it open, the default value is false
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnOpenedChanged { get; set; }

    /// <summary>
    /// OnTextChanged is fired when the string value is changed(when an input occurs in the textfield or when an item is selected)
    /// </summary>
    [Parameter]
    public EventCallback<string> OnTextChanged { get; set; }

    /// <summary>
    /// This function is used to select the string part from the item, used both for filtering and displaying if no ItemTemplate is defined.
    /// </summary>
    [Parameter]
    public Func<TItem, string> DisplayFieldSelector { get; set; }

    [Parameter]
    public IReadOnlyList<TItem> Items { get; set; }

    public List<TItem> Values { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    protected void ItemClick(EventArgs e, TItem item)
    {
        Values.Add(item);
        ClosePopup();
        StateHasChanged();
    }

    protected void RemoveItem(EventArgs e, TItem item)
    {
        Values.Remove(item);
    }

    protected IEnumerable<TItem> GetFilteredItems(string searchText)
    {
        if (string.IsNullOrEmpty(searchText))
            return Items;

        return Items.Select(i => new
        {
            Text = DisplayFieldSelector(i),
            Item = i
        })
        .Where(i => i.Text.ToLowerInvariant().Contains(searchText.ToLowerInvariant()))
        .Select(i => i.Item);
    }
}
