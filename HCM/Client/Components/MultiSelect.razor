@typeparam TItem
@using Microsoft.AspNetCore.Components;

<div class="multiSelect">
    <ul class="multiSelect_list">
        @foreach (var value in Values)
        {
            <li class="multiSelect_chip multiSelect_list_item multiSelect_dropdown_list_item bg--lightBlue" @onclick="(e => ValueClicked(value))">
                @DisplayFieldSelector?.Invoke(value)
                <span class="close" @onclick="(e => RemoveValue(value))">×</span>
            </li>
        }
        <li class="multiSelect_inputSpace multiSelect_list_item multiSelect_dropdown_list_item">
            <input type="search" class="multiSelect_input" placeholder="@Placeholder" @oninput="OnValueChanged" @bind="SearchText" @onfocus="OpenPopup" @onblur="ClosePopup" />
        </li>
    </ul>
    @if (IsOpened && ((Items != null && Items.Count > 0) || !string.IsNullOrEmpty(SearchText)))
    {
        <div class="dropdown multiSelect_dropdown bg--white">
            <ul class="multiSelect_list multiSelect_dropdown_list">
                @{
                    var displayItems = GetFilteredItems(SearchText);
                    foreach (var item in displayItems)
                    {
                        <li class="multiSelect_list_item multiSelect_dropdown_list_item" @onmousedown="@(e => ItemClick(item))">
                            @(DisplayFieldSelector?.Invoke(item) ?? item?.ToString())
                        </li>
                    }
                    if (displayItems.Count() == 0 && !string.IsNullOrEmpty(SearchText))
                    {
                        <li class="text-info multiSelect_list_item text-center multiSelect_dropdown_list_item">
                            <a @onmousedown="AddNewItem" href="#">Add New Value: @SearchText</a>
                        </li>
                    }
                }
            </ul>
        </div>
    }
</div>

@code {

    private bool isOpened;
    private string searchText;

    protected override void OnParametersSet()
    {
        if (Values == null)
            Values = new List<TItem>();
    }

    protected void OpenPopup()
    {
        IsOpened = true;
    }

    protected void ClosePopup()
    {
        IsOpened = false;
    }

    /// <summary>
    /// The Search Text displayed in the TextField
    /// </summary>
    [Parameter]
    public string SearchText
    {
        get { return searchText; }
        set
        {
            searchText = value;
            OnTextChanged.InvokeAsync(value);
        }
    }

    public bool IsOpened
    {
        get { return isOpened; }
        set
        {
            isOpened = value;
            OnOpenedChanged.InvokeAsync(value);
            StateHasChanged();
        }
    }

    public void OnValueChanged(ChangeEventArgs ev)
    {
        SearchText = (string)ev.Value;
        StateHasChanged();
    }

    public void AddNewItem()
    {
        OnAddNewItem.InvokeAsync(SearchText);
        SearchText = string.Empty;
    }

    [Parameter]
    public EventCallback<string> OnAddNewItem { get; set; }

    /// <summary>
    /// OnOpenedChanged is fired when the popup dialog is opened or close and the parameter indicates whenever is it open, the default value is false
    /// </summary>
    [Parameter]
    public EventCallback<bool> OnOpenedChanged { get; set; }

    /// <summary>
    /// OnTextChanged is fired when the string value is changed(when an input occurs in the textfield or when an item is selected)
    /// </summary>
    [Parameter]
    public EventCallback<string> OnTextChanged { get; set; }

    /// <summary>
    /// This function is used to select the string part from the item, used both for filtering and displaying if no ItemTemplate is defined.
    /// </summary>
    [Parameter]
    public Func<TItem, string> DisplayFieldSelector { get; set; }

    [Parameter]
    public IReadOnlyList<TItem> Items { get; set; }

    [Parameter]
    public List<TItem> Values { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    protected void ItemClick(TItem item)
    {
        Values.Add(item);
        OnItemSelected.InvokeAsync(item);
        SearchText = string.Empty;
    }

    [Parameter]
    public EventCallback<TItem> OnItemSelected { get; set; }

    protected void ValueClicked(TItem item)
    {
        OnValueClicked.InvokeAsync(item);
    }

    protected void RemoveValue(TItem item)
    {
        Values.Remove(item);
        OnValueRemoved.InvokeAsync(item);
    }

    [Parameter]
    public EventCallback<TItem> OnValueClicked { get; set; }

    [Parameter]
    public EventCallback<TItem> OnValueRemoved { get; set; }

    protected IEnumerable<TItem> GetFilteredItems(string searchText)
    {
        var values = Values.Select(i => DisplayFieldSelector(i));
        var items = Items.Select(i => new
        {
            Text = DisplayFieldSelector(i),
            Item = i
        })
        .Where(i => !values.Contains(i.Text))
        .OrderBy(i => i.Text);

        if (!string.IsNullOrEmpty(searchText))
            items = items.Where(i => i.Text.ToLowerInvariant().Contains(searchText.ToLowerInvariant())).OrderBy(i => i.Text);

        return items.Select(i => i.Item);
    }
}
