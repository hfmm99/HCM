@page "/"
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient httpClient

<!doctype html>
<html lang="en">

<head>
    <link href="/css/main.css" rel="stylesheet" />
</head>

<body>
    @if (employee != null)
    {
    <div class="container-fluid">
        <div class="panel panel-headline">
            <div class="panel-heading">
                <h3 class="panel-title">Dashboard</h3>
                <p class="panel-subtitle">Period: @date_short</p>
            </div>
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="metric">
                            <span class="icon"><i class="oi oi-briefcase"></i></span>
                            <p>
                                @foreach (var works_for in employee.WorksFor)
                                {
                                <span class="number">@works_for.Name</span>
                                }
                                    <span class="title">Works for</span>
                                </p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="metric">
                            <span class="icon"><i class="oi oi-people"></i></span>
                            <p>
                                @foreach (var member in employee.IsMemberOf)
                                {
                                <span class="number">@member.Name</span>
                                }
                                <span class="title">Member of</span>
                            </p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="metric">
                            <span class="icon"><i class="oi oi-monitor"></i></span>
                            <p>
                                <span class="number">Developer</span>
                                <span class="title">Work as</span>
                            </p>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="metric">
                            <span class="icon"><i class="oi oi-home"></i></span>
                            <p>
                                @foreach (var country in employee.LivesIn)
                                {
                                <span class="number">@country.Name</span>
                                }
                                <span class="title">Lives in</span>
                            </p>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
        }
</body>
</html>


@code {

    private GraphQLApiClient gql = null;
    private GqlEmployee employee = null;
    DateTime date;
    string date_short;

    protected override async Task OnInitializedAsync()
    {
        var name = await sessionStorage.GetItemAsync<string>("name");

        if (name == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            await Search();
        }
    }

    protected async Task Search()
    {
        var name = await sessionStorage.GetItemAsync<string>("name");
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        if (name != null)
        {
            var query = gql.Employee(string.Empty, user: name, fields: e => new GqlEmployee
            {
                _id = e._id,
                Name = e.Name,
                IsMemberOf = new List<GqlTeam>
                {
                    new GqlTeam
                    {
                    Name = e.IsMemberOf[0].Name
                    }
                },
                WorksFor = new List<GqlClient>
                {
                    new GqlClient
                    {
                        Name= e.WorksFor[0].Name
                    }
                },
                LivesIn= new List<GqlCountry>
                {
                    new GqlCountry
                    {
                        Name = e.LivesIn[0].Name
                    }               
                }
            });
        employee = (await query.RunAsync()).FirstOrDefault();
        date = DateTime.Today;
        date_short = date.ToShortDateString();
    }
}
}