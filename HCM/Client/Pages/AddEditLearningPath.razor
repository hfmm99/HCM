@page "/learning_path/{Id:int}"
@using HCM.Client.Components
@using HCM.Client.Components.Grid
@using HCM.Client.Components.DataList
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService user_name

<form class="newPath needs-validation">
    <div class="form-row">
        <div class="col">
            <label for="txtName">Title:</label>
            <input id="txtName" type="text" class="form-control" placeholder="Enter Path's title" required autofocus />
            <div class="invalid-feedback">
                You must enter a name.
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="col">
            <label for="txtName">Summary:</label>
            <textarea id="txtName" type="text" class="form-control summary_form" placeholder="Enter a little summary" required autofocus />
            <div class="invalid-feedback">
                You must enter something.
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="col">
            <label for="txtName">Punctual objectives:</label>
            <input id="txtName" type="text" class="form-control" placeholder="Enter an ojective" @oninput="OnValueChanged" required autofocus />
            <button type="button" class="add-button btn btn-secondary" style="margin-top:1rem;margin-bottom:1rem;" @onclick="AddObjective">
                <span class="oi oi-plus" />
                Add
            </button>
            <div class="form-group">
                <table class="table table-bordered table-hover table-striped">
                    <thead>
                        <tr class="text--vertMiddle">
                            <th>Objectives in this learning path</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in learningPath.objectives)
                        {
                            <tr class="text--vertMiddle">
                                <td class="table_td required_experience text--vertMiddle">@obj.objective</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <br />
            <div class="invalid-feedback">
                You must enter something.
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="col">
            <div class="form-group">
                <label for="txtName">Add path's tags:</label>
                <MultiSelect TItem="GqlTags" Placeholder="Type to Search" Items="TagsData" DisplayFieldSelector="@(i => i.name)" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <table class="table table-bordered table-hover table-striped">
                <thead>
                    <tr class="text--vertMiddle">
                        <th>Items in this learning path</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in LearningItems)
                    {
                        <tr class="text--vertMiddle">
                            <td class="table_td required_experience text--vertMiddle">@item.Title</td>
                        </tr>
                    }
                    <tr class="text--vertMiddle" @onclick="NewLearningItem">
                        <td class="table_td required_experience text--vertMiddle bg--lightBlue hover--shine">+Add new learning item</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s">Save</button>
    <button class="btn btn-secondary underline-first-letter" accesskey="c">Cancel</button>
</form>

@code {

    [Parameter]
    public int Id { get; set; }

    private bool IsVisible { get; set; }
    private string newObjective;

    private GqlLearningPath learningPath = null;
    private Grid grid;

    private List<GqlItems> LearningItems = null;

    private List<GqlTags> TagsData = new List<GqlTags>{
        new GqlTags{name = "Advanced"}
    };

    [Parameter]
    public string NewObjective
    {
        get { return newObjective; }
        set
        {
            newObjective = value;
            OnTextChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");

        if (user_name_session == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {    
        LearningItems = new List<GqlItems> {
            new GqlItems{Title = "Variables and constants"},
            new GqlItems{Title = "Functions"}
        };

        learningPath = new GqlLearningPath
        {
            name = "ASP.NET MVC",
            objectives = new List<GqlObjectives> {
                new GqlObjectives{objective = "aaaa"},
                new GqlObjectives{objective = "bbbb"},
                new GqlObjectives{objective = "cccc"}
            }

        };

        StateHasChanged();
            }
    }

    [Parameter]
    public EventCallback<string> OnTextChanged { get; set; }

    private void AddObjective()
    {
        OnAddNewItem(NewObjective);
    }

    public void OnAddNewItem(string text)
    {
        var newObjective = new GqlObjectives { objective = text };
        Console.WriteLine(newObjective);
        learningPath.objectives.Add(newObjective);
    }

    public void OnValueChanged(ChangeEventArgs ev)
    {
        NewObjective = (string)ev.Value;
        StateHasChanged();
    }

    protected void NewLearningItem()
    {
        navigationManager.NavigateTo("/learning_item/-1");
    }

    public class GqlLearningPath
    {
        public string name;
        public List<GqlObjectives> objectives;
    };

    public class GqlTags
    {
        public string name { get; set; }
    };

    public class GqlObjectives
    {
        public string objective { get; set; }
    };

    public class GqlItems
    {
        public string Title { get; set; }
    };
}
