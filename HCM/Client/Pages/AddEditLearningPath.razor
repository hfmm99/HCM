@page "/learning_path/{Id:int}"
@using HCM.Client.Components
@using HCM.Client.Components.Grid
@using HCM.Client.Components.DataList
@using System.Collections.Generic;
@using System.Text;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService user_name

<form class="newPath needs-validation">
    @if (learningpath != null)
    {
        <div class="form-row">
            <div class="col">
                <label for="txtTitle">Title:</label>
                <input id="txtTitle" type="text" class="form-control" placeholder="Enter Path's title" required autofocus @bind="learningpath.Name" />
                <div class="invalid-feedback">
                    You must enter a name.
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="txtSumary">Summary:</label>
                <textarea id="txtSumary" type="text" class="form-control summary_form" placeholder="Enter a little summary" required autofocus @bind="learningpath.Description" />
                <div class="invalid-feedback">
                    You must enter something.
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="txtObjetive">Punctual objectives:</label>
                <MultiSelect TItem="string" Placeholder="Type to Search" Items="Objectives" Values="Objectives" DisplayFieldSelector="@(i =>i)" OnValueRemoved="@ObjectiveRemoved" OnAddNewItem="@AddNewObjective" />
                <br />
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <div class="form-group">
                    <label for="txtName">Add path's tags:</label>
                    <MultiSelect TItem="GqlTag" Placeholder="Type to Search" Items="LearningTags" Values="learningpath.Tags" DisplayFieldSelector="@(i => i.Name)" OnValueRemoved="@TagRemoved" OnAddNewItem="@AddNewTag" />
                </div>
            </div>
        </div>
        <button class="btn btn-primary underline-first-letter" type="button" accesskey="s" @onclick="Save">Save</button>
        <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
    }
</form>

@code {

    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private GqlLearningPath learningpath = null;

    private List<GqlTag> LearningTags;
    private List<GqlTag> RemovedTags;
    private List<string> Objectives = new List<string>();
    private List<string> RemovedObjectives;

    protected override async Task OnInitializedAsync()
    {
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");

        if (user_name_session == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");
            if (Id > 0)
            {
                var query = gql.LearningPath(string.Empty, _id: Id, fields: e => new GqlLearningPath
                {
                    _id = e._id,
                    Name = e.Name,
                    Description = e.Description,
                    Tags = new List<GqlTag>
            {
                    new GqlTag
                    {
                    Name = e.Tags[0].Name
                    }
                    },
                    Objetives = e.Objetives,
                });
                learningpath = (await query.RunAsync()).FirstOrDefault();
                StateHasChanged();
                Objectives = learningpath.Objetives.Split(';').ToList();
            }
            else
                learningpath = new GqlLearningPath { Tags = new List<GqlTag>() };

            //Load Tags
            LearningTags = await gql.Tag(string.Empty, fields: t => new GqlTag
            {
                _id = t._id,
                Name = t.Name
            }).RunAsync();

            RemovedTags = new List<GqlTag>();
            RemovedObjectives = new List<string>();
        }
    }

    public async void Save()
    {
        StringBuilder builder = new StringBuilder();
        foreach (var objective in Objectives)
        {
            builder.Append(objective).Append(";");
        }
        string objectives_result = builder.ToString();
        await gql.MergeLearningPath(string.Empty, name: learningpath.Name, description: learningpath.Description,objetives: objectives_result).RunAsync();
        SaveTags();
        Cancel();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/learning_paths");
    }

    public void TagRemoved(GqlTag tag)
    {
        RemovedTags.Add(tag);
        learningpath.Tags.Remove(tag);
    }

    public void AddNewTag(string text)
    {
        var newTag = new GqlTag { Name = text };
        LearningTags.Add(newTag);
        learningpath.Tags.Add(newTag);
    }

    private async void SaveTags()
    {
        // Insert newly created tags, if any
        foreach (var tag in LearningTags.Where(s => !s._id.HasValue))
            await gql.CreateTag(string.Empty, tag.Name).RunAsync();

        // Save learningpath tags
        await gql.AddLearningPathTags(string.Empty, name: learningpath.Name, tags: learningpath.Tags.Select(s => s.Name).ToArray()).RunAsync();

        // Delete removed tag, if any
        var tagsToRemove = RemovedTags.Select(s => s.Name).Except(learningpath.Tags.Select(es => es.Name));
        if (tagsToRemove.Any())
            await gql.DeleteLearningPathTags(string.Empty, name: learningpath.Name, tags: tagsToRemove.ToArray()).RunAsync();
    }

    //Prueba
    public void ObjectiveRemoved(string objective)
    {
        RemovedObjectives.Add(objective);
        Objectives.Remove(objective);
    }

    public void AddNewObjective(string text)
    {
        Objectives.Add(text);
    }
}
