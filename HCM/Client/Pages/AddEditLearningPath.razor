@page "/learning_path/{Id:int}"
@using HCM.Client.Components
@using HCM.Client.Components.Grid
@using HCM.Client.Components.DataList
@inject HttpClient httpClient
@inject NavigationManager navigationManager

    <form class="newPath needs-validation">
        <div class="form-row">
            <div class="col">
                <label for="txtName">Title:</label>
                <input id="txtName" type="text" class="form-control" placeholder="Enter Path's title" required autofocus />
                <div class="invalid-feedback">
                    You must enter a name.
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="txtName">Summary:</label>
                <textarea id="txtName" type="text" class="form-control summary_form" placeholder="Enter a little summary" required autofocus />
                <div class="invalid-feedback">
                    You must enter something.
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="txtName">Punctual objectives:</label>
                <input id="txtName" type="text" class="form-control" placeholder="Enter an ojective" @oninput="OnValueChanged" required autofocus />
                <button type="button" class="add-button btn btn-secondary" style="margin-top:1rem;" @onclick="AddObjective">
                    <span class="oi oi-plus" />
                    Add
                </button>
                <div class="form-group">
                    <label>Objectives:</label>
                    <ul class="list-group d-flex flex-row flex-wrap">
                        @foreach (var emp in learningPath.objectives)
                        {
                            <li class="list-group-item list-group-item-info p-1 w-25" style="margin:1rem;display:block;">
                                <div><span>@emp.objective</span></div>
                            </li>
                        }
                    </ul>
                </div>  
                <br />
                <div class="invalid-feedback">
                    You must enter something.
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <div class="form-group">
                    <label for="txtName">Add path's tags:</label>
                    <MultiSelect TItem="GqlTags" Placeholder="Type to Search" Items="TagsData" DisplayFieldSelector="@(i => i.name)" />
                </div>
            </div>
        </div>
        <div class="row" style="padding:1rem">
            <div class="col">
                <label for="txtName">Items in this learning path:</label>
                <Grid @ref="grid" Data="@LearningItems">
                    <GridColumns>
                        <GridColumn Field="@nameof(GqlItems.title)" />
                    </GridColumns>
                </Grid>
                <button type="button" class="add-button btn btn-secondary" style="margin-top:1rem;" @onclick="NewLearningItem">
                    <span class="oi oi-plus" />Add learning item
                </button>
            </div>
        </div>
            <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s">Save</button>
            <button class="btn btn-secondary underline-first-letter" accesskey="c">Cancel</button>
    </form>

@code {

    [Parameter]
    public int Id { get; set; }

    private bool IsVisible { get; set; }
    private string newObjective;

    private GqlLearningPath learningPath = null;
    private Grid grid;

    private List<GqlItems> LearningItems = null;

    private List<GqlTags> TagsData = new List<GqlTags>{
        new GqlTags{name = "Advanced"}
    };

    [Parameter]
    public string NewObjective
    {
        get { return newObjective; }
        set
        {
            newObjective = value;
            OnTextChanged.InvokeAsync(value);
        }
    }

    protected override void OnInitialized()
    {
        LearningItems = new List<GqlItems> {
            new GqlItems{title = "Variables and constants"},
            new GqlItems{title = "Functions"}
        };

        learningPath = new GqlLearningPath
        {
            name = "ASP.NET MVC",
            objectives = new List<GqlObjectives> { 
                new GqlObjectives{objective = "aaaa"},
                new GqlObjectives{objective = "bbbb"},
                new GqlObjectives{objective = "cccc"}
            }

        };

        StateHasChanged();
    }

    [Parameter]
    public EventCallback<string> OnTextChanged { get; set; }

    private void AddObjective()
    {
        OnAddNewItem(NewObjective);
    }

    public void OnAddNewItem(string text)
    {
        var newObjective = new GqlObjectives { objective = text };
        Console.WriteLine(newObjective);
        learningPath.objectives.Add(newObjective);
    }

    public void OnValueChanged(ChangeEventArgs ev)
    {
        NewObjective = (string)ev.Value;
        StateHasChanged();
    }

    protected void NewLearningItem()
    {
        navigationManager.NavigateTo("/learning_item/-1");
    }

    public class GqlLearningPath
    {
        public string name;
        public List<GqlObjectives> objectives;
    };

    public class GqlTags
    {
        public string name { get; set; }
    };

    public class GqlObjectives
    {
        public string objective { get; set; }
    };

    public class GqlItems
    {
        public string title { get; set; }
    };
}
