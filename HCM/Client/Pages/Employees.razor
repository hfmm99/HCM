@page "/employees"
@using HCM.Client.Components
@using HCM.Client.Components.Grid
@using HCM.Client.Components.Modals
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ModalService ModalService

<DeleteModal OnDelete="@DeleteEmployee" />

<div class="btn-toolbar row margin-bottom-small" role="toolbar">
    <button type="button" class="btn btn-outline-primary mr-1" @onclick="NewEmployee">
        <span class="oi oi-plus" />
        New
    </button>
    <button type="button" class="btn btn-outline-secondary mr-1" @onclick="EditEmployee">
        <span class="oi oi-pencil" />
        Edit
    </button>
    <button type="button" class="btn btn-outline-danger mr-1" @onclick="ConfirmDelete">
        <span class="oi oi-x" />
        Delete
    </button>
</div>

<div class="row margin-bottom-small">
    <SearchBox @bind-SearchTerm="SearchTerm" PlaceHolder="Search Employee..." />
</div>

<div class="row">
    <Grid @ref="grid" Data="@employees" OnDoubleClick="@EditEmployee" OnSort="@OnGridSort">
        <GridColumns>
            <GridColumn Title="Image">
                <Template>
                    @{
                        var employee = context as GqlEmployee;

                        if (!string.IsNullOrEmpty(employee.Image))
                        {
                            <center><img src="/Images/@employee.Image" alt="@employee.Name" height="64" /></center>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(GqlEmployee.Name)" />
            <GridColumn Field="@nameof(GqlEmployee.Email)" />
            <GridColumn Field="@nameof(GqlEmployee.Phone)" />
        </GridColumns>
    </Grid>
    <div class="mx-auto" style="width: 215px;">
        <Pager Pages="@pages" OnPageChange="OnPageChange" />
    </div>
</div>

@code{
    private GraphQLApiClient gql = null;
    private List<GqlEmployee> employees = null;

    private Gql_EmployeeOrdering sorting = Gql_EmployeeOrdering.name_asc;

    private int page = 1;
    private int pages = 0;

    private Grid grid;

    private bool showModal;

    protected override async Task OnInitializedAsync()
    {
        await Search();
    }

    private string searchTerm;
    public string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; Search(); }
    }

    protected async Task Search()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        var query = gql.Employee(string.Empty, first: 10, offset: (page - 1) * 10, filter: string.IsNullOrEmpty(SearchTerm) ? null : new Gql_EmployeeFilter { OR = new List<Gql_EmployeeFilter> { new Gql_EmployeeFilter { Name_contains = SearchTerm }, new Gql_EmployeeFilter { Email_contains = SearchTerm } } }, orderBy: new[] { sorting }, fields: e => new GqlEmployee
        {
            _id = e._id,
            Name = e.Name,
            Email = e.Email,
            Phone = e.Phone,
            Image = e.Image
        }); ;

        employees = await query.RunAsync();

        pages = 10; // (await gql.EmployeeCount(string.Empty).RunAsync()).FirstOrDefault().Value;

        StateHasChanged();
    }

    public void OnGridSort(SortEventArgs e)
    {
        switch (e.ColumnName)
        {
            case nameof(GqlEmployee.Name):
                sorting = e.SortingAscending ? Gql_EmployeeOrdering.name_asc : Gql_EmployeeOrdering.name_desc;
                break;
            case nameof(GqlEmployee.Email):
                sorting = e.SortingAscending ? Gql_EmployeeOrdering.email_asc : Gql_EmployeeOrdering.email_desc;
                break;
        }

        Search();
    }

    public void OnPageChange(PageChangeEventArgs e)
    {
        Console.WriteLine(e.Page);
        page = e.Page;
        Search();
    }

    public void NewEmployee()
    {
        navigationManager.NavigateTo("/employee/" + -1);
    }

    public void EditEmployee()
    {
        if (grid.SelectedItem != null)
            navigationManager.NavigateTo("/employee/" + (grid.SelectedItem as GqlEmployee)._id);
    }

    public void ConfirmDelete()
    {
        if (grid.SelectedItem != null)
        {
            showModal = true;
            ModalService.Show(showModal);
        }
    }

    public void DeleteEmployee()
    {
        showModal = false;
        ModalService.Show(showModal);
        gql.DeleteEmployee(string.Empty, (grid.SelectedItem as GqlEmployee).Name).RunAsync();
        Search();
    }
}