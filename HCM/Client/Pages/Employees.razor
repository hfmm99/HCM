@page "/employees"
@using HCM.Client.Components
@using HCM.Client.Components.Grid
@inject HttpClient httpClient

<div class="btn-toolbar row margin-bottom-small" role="toolbar">
    <button type="button" class="btn btn-outline-primary mr-1">
        <span class="oi oi-plus" />
        Insert
    </button>
    <button type="button" class="btn btn-outline-secondary mr-1">
        <span class="oi oi-pencil" />
        Edit
    </button>
    <button type="button" class="btn btn-outline-danger mr-1">
        <span class="oi oi-x" />
        Delete
    </button>
</div>

<div class="row margin-bottom-small">
    <SearchBox @bind-SearchTerm="SearchTerm" />
</div>

<div class="row">
    <Grid Items="@employees" OnSort="@OnGridSort">
        <GridColumns>
            <GridColumn Field="Name" />
            <GridColumn Field="Email" />
        </GridColumns>
    </Grid>
    <div class="mx-auto" style="width: 130px;">
        <Pager Pages="10" OnPageChange="OnPageChange" />
    </div>
</div>

@code
{
    private List<GqlEmployee> employees = null;

    private Gql_EmployeeOrdering sorting = Gql_EmployeeOrdering.name_asc;

    private int page = 1;

    protected override async Task OnInitializedAsync()
    {
        await Search();
    }

    private string searchTerm;
    public string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; Search(); }
    }

    protected async Task Search()
    {
        var gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        var query = gql.Employee(string.Empty, first: 10, offset: (page - 1) * 10, filter: string.IsNullOrEmpty(SearchTerm) ? null : new Gql_EmployeeFilter { OR = new List<Gql_EmployeeFilter> { new Gql_EmployeeFilter { Name_contains = SearchTerm }, new Gql_EmployeeFilter { Email_contains = SearchTerm } } }, orderBy: new[] { sorting }, fields: e => new GqlEmployee
        {
            _id = e._id,
            Name = e.Name,
            Email = e.Email
        }); ;

        employees = await query.RunAsync();

        StateHasChanged();
    }

    public void OnGridSort(SortEventArgs e)
    {
        switch (e.ColumnName)
        {
            case nameof(GqlEmployee.Name):
                sorting = e.SortingAscending ? Gql_EmployeeOrdering.name_asc : Gql_EmployeeOrdering.name_desc;
                break;
            case nameof(GqlEmployee.Email):
                sorting = e.SortingAscending ? Gql_EmployeeOrdering.email_asc : Gql_EmployeeOrdering.email_desc;
                break;
        }

        Search();
    }

    public void OnPageChange(PageChangeEventArgs e)
    {
        Console.WriteLine(e.Page);
        page = e.Page;
        Search();
    }
}
