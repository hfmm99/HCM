@page "/evaluation/{Id:int}"

@using HCM.Client.Components.AccordionTest
@using HCM.Client.Components.ScoreRating

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService user_name

<form class="needs-validation">
    @if (employee != null)
    {
        <div class="panel-body">
            <div class="row">
                <div class="col-md-3">
                    <div class="metric">
                        <span class="icon"><i class="oi oi-clipboard"></i></span>
                        <p>
                            <span class="title">Evaluation for</span>
                            <span class="number">@employee.Name</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    }

    <AccordionTest>
        @if (Skills != null)
        {
            @foreach (var skill in Skills)
            {
                <AccordionOption Title="@skill.Name" Subskills="@skill.Skill_of" />
            }
        }
    </AccordionTest>
    <br />
    <button class="btn btn-primary underline-first-letter" type="button" accesskey="s" @onclick="Save">Save</button>
    <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
</form>
@code{
    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private List<GqlSkill> Skills = null;
    private GqlEmployee employee = null;

    protected override async Task OnInitializedAsync()
    {
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");
        if (user_name_session == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            await Search();
        }
    }

    protected async Task Search()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        var query = gql.Skill(string.Empty, fields: e => new GqlSkill
        {
            _id = e._id,
            Name = e.Name,
            Skill_of = new List<GqlSubSkill>
{
                new GqlSubSkill
                {
                    Name = ""
                }
            }
        });

        var query2 = gql.Employee(string.Empty, _id: Id, fields: e => new GqlEmployee
        {
            _id = e._id,
            Name = e.Name
        });

        Skills = await query.RunAsync();
        employee = (await query2.RunAsync()).FirstOrDefault();
        StateHasChanged();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/evaluations");
    }

    public async void Save()
    {
        //Save the employee who is doing the event
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");       
        await gql.AddEmployeeEvaluated(string.Empty, name: user_name_session, evaluated: new string[] { employee.Name }).RunAsync();

        Cancel();
    }
}
