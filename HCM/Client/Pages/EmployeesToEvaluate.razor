@page "/evaluations"

@using HCM.Client.Components
@using HCM.Client.Components.Grid

@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService user_name

<div class="row margin-btm-small">
    <SearchBox @bind-SearchTerm="SearchTerm" PlaceHolder="Search Employee to evaluate..." />
</div>

<div class="row">
    <Grid @ref="grid" Data="@employees" Pages="@pages" OnPageChange="@OnPageChange" OnDoubleClick="@EvaluateEmployee">
        <GridColumns>
            <GridColumn Title="Image">
                <Template>
                    @{
                        var employee = context as GqlEmployee;

                        if (!string.IsNullOrEmpty(employee.Image))
                        {
                            <center><img src="/Images/@employee.Image" alt="@employee.Name" height="64" /></center>
                        }
                    }
                </Template>
            </GridColumn>
            <GridColumn Field="@nameof(GqlEmployee.Name)" />
            <GridColumn Title="Status">
                <Template>
                    @{
                        var EmployeeToEvaluate = context as GqlEmployee;
                        foreach (var evaluated in employee.Evaluated)
                        {
                            if (evaluated.Name == EmployeeToEvaluate.Name)
                            {
                                @*<center><span class="icon"><i class="oi oi-circle-x" style="color:red;"></i></span></center>*@
                                <center><span class="icon evaluated"><i class="oi oi-circle-check" title="Evaluated"></i></span></center>
                            }
                            @*else
                            {
                                <center><span class="icon"><i class="oi oi-circle-check" style="color:forestgreen;"></i></span></center>
                            }*@
                        }
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </Grid>
</div>
@code {
    private GqlEmployee employee = null;
    private List<GqlEmployee> employees = null;

    private GraphQLApiClient gql = null;

    private Gql_EmployeeOrdering sorting = Gql_EmployeeOrdering.name_asc;

    private Grid grid;

    protected override async Task OnInitializedAsync()
    {
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");
        if (user_name_session == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            await Search();
        }
    }

    protected async Task Search()
    {
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        var query = gql.Employee(string.Empty, name: user_name_session, fields: e => new GqlEmployee
        {
            _id = e._id,
            IsMemberOf = new List<GqlTeam>
{
                    new GqlTeam
                    {
                    Name = ""
                    }
                },
            Name = e.Name,
            Evaluated = new List<GqlEmployee>
{
                new GqlEmployee
                {
                    Name = ""
                }
            }
        });
        employee = (await query.RunAsync()).FirstOrDefault();

        var filter = string.IsNullOrEmpty(searchTerm)
            ? new Gql_EmployeeFilter { IsMemberOf = new Gql_TeamFilter { Name = employee.IsMemberOf[0].Name } }
            : new Gql_EmployeeFilter
            {
                AND = new List<Gql_EmployeeFilter>
                {
                    new Gql_EmployeeFilter { IsMemberOf = new Gql_TeamFilter { Name = employee.IsMemberOf[0].Name } },
                    new Gql_EmployeeFilter {Name_contains = SearchTerm}
                }
            };
        var query2 = gql.Employee(string.Empty, filter: filter, orderBy: new[] { sorting }, fields: e => new GqlEmployee
        {
            _id = e._id,
            Name = e.Name,
            Image = e.Image,
        });

        employees = await query2.RunAsync();
        pages = Convert.ToInt32(Math.Ceiling(((await gql.EmployeeCount(string.Empty).RunAsync()).FirstOrDefault() ?? 1) / 10M));
        StateHasChanged();
    }

    private string searchTerm;
    public string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; Search(); }
    }

    private int page = 1;
    private int pages = 0;

    public void OnPageChange(PageChangeEventArgs e)
    {
        page = e.Page;
        Search();
    }

    public void EvaluateEmployee()
    {
        if (grid.SelectedItem != null)
            navigationManager.NavigateTo("/evaluation/" + (grid.SelectedItem as GqlEmployee)._id);
    }

    public void OnGridSort(SortEventArgs e)
    {
        switch (e.ColumnName)
        {
            case nameof(GqlEmployee.Name):
                sorting = e.SortingAscending ? Gql_EmployeeOrdering.name_asc : Gql_EmployeeOrdering.name_desc;
                break;
        }
        Search();
    }
}
