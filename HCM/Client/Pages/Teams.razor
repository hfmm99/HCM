@page "/teams"
@using HCM.Client.Components
@using HCM.Client.Components.Grid
@using HCM.Client.Components.Modals
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ModalService ModalService
@inject Blazored.SessionStorage.ISessionStorageService user_name

<DeleteModal OnDelete="@DeleteTeam" />

<div class="btn-toolbar row margin-btm-small" role="toolbar">
    <button type="button" class="btn btn-outline-primary mr-1" @onclick="NewTeam">
        <span class="oi oi-plus" />
        New
    </button>
    <button type="button" class="btn btn-outline-secondary mr-1 underline-first-letter" @onclick="EditTeam">
        <span class="oi oi-pencil" />
        Edit
    </button>
    <button type="button" class="btn btn-outline-danger mr-1 underline-first-letter" @onclick="ConfirmDelete">
        <span class="oi oi-x" />
        Delete
    </button>
</div>

<div class="row margin-bottom-small">
    <SearchBox @bind-SearchTerm="SearchTerm" PlaceHolder="Search Team" />
</div>

<div class="row">
    <Grid @ref="grid" Data="@teams" OnDoubleClick="@EditTeam" OnSort="@OnGridSort" Pages="@pages" OnPageChange="@OnPageChange">
        <GridColumns>
            <GridColumn Field="@nameof(GqlTeam.Name)" />
        </GridColumns>
    </Grid>
</div>

@code{
    private GraphQLApiClient gql = null;
    private List<GqlTeam> teams = null;

    private Gql_TeamOrdering sorting = Gql_TeamOrdering.name_asc;

    private int pages = 0;
    private int page = 1;

    private Grid grid;

    protected override async Task OnInitializedAsync()
    {
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");

        if (user_name_session == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            await Search();
        }
    }

    private string searchTerm;
    public string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; Search(); }
    }

    protected async Task Search()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        var query = gql.Team(string.Empty, first: 10, offset: (page - 1) * 10, filter: string.IsNullOrEmpty(SearchTerm) ? null : new Gql_TeamFilter { Name_contains = SearchTerm }, orderBy: new[] { sorting }, fields: t => new GqlTeam
        {
            _id = t._id,
            Name = t.Name
        });

        teams = await query.RunAsync();

        StateHasChanged();
        pages = Convert.ToInt32(Math.Ceiling(((await gql.TeamCount(string.Empty).RunAsync()).FirstOrDefault() ?? 1) / 10M));
    }

    public void OnGridSort(SortEventArgs e)
    {
        switch (e.ColumnName)
        {
            case nameof(GqlTeam.Name):
                sorting = e.SortingAscending ? Gql_TeamOrdering.name_asc : Gql_TeamOrdering.name_desc;
                break;
        }
        Search();
    }

    public void OnPageChange(PageChangeEventArgs e)
    {
        page = e.Page;
        Search();
    }

    public void NewTeam()
    {
        navigationManager.NavigateTo("/team/" + -1);
    }

    public void EditTeam()
    {
        if (grid.SelectedItem != null)
            navigationManager.NavigateTo("/team/" + (grid.SelectedItem as GqlTeam)._id);
    }

    public void ConfirmDelete()
    {
        if (grid.SelectedItem != null)
        {
            string deleteItemName = (grid.SelectedItem as GqlTeam).Name;
            bool showModal = true;
            ModalService.ShowModal(showModal, deleteItemName);
        }
    }

    public async void DeleteTeam()
    {
        gql.DeleteTeam(string.Empty, (grid.SelectedItem as GqlTeam).Name).RunAsync();
        ModalService.CloseModal();
        await Search();
    }
}