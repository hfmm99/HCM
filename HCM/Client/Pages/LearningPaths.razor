@page "/learning_paths"
@using HCM.Client.Components
@using HCM.Client.Components.Grid
@using HCM.Client.Components.Modals
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService user_name
@inject ModalService ModalService

<DeleteModal OnDelete="@DeletePath" />
<div class="btn-toolbar row margin-btm-small" role="toolbar">
    <button type="button" class="btn btn-outline-primary mr-1" @onclick="NewPath">
        <span class="oi oi-plus" />
        New
    </button>
    <button type="button" class="btn btn-outline-secondary mr-1" @onclick="EditPath">
        <span class="oi oi-pencil" />
        Edit
    </button>
    <button type="button" class="btn btn-outline-danger mr-1" @onclick="ConfirmDelete">
        <span class="oi oi-x" />
        Delete
    </button>
</div>

<div class="row margin-bottom-small">
    <SearchBox @bind-SearchTerm="SearchTerm" PlaceHolder="Search Learning Path" />
</div>

<div class="row">
    <Grid @ref="grid" Data="@learningPaths" OnDoubleClick="@EditPath" OnSort="@OnGridSort">
        <GridColumns>
            <GridColumn Field="@nameof(GqlLearningPath.Name)" />
        </GridColumns>
    </Grid>
    <div class="mx-auto" style="width: 215px;">
        <Pager Pages="10" OnPageChange="OnPageChange" />
    </div>
</div>

@code {

    private GraphQLApiClient gql = null;
    private List<GqlLearningPath> learningPaths = null;

    private Grid grid;

    private Gql_LearningPathOrdering sorting = Gql_LearningPathOrdering.name_asc;

    private int page = 1;
    private int pages = 0;

    protected override async Task OnInitializedAsync()
    {
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");

        if (user_name_session == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            await Search();
        }
    }

    private string searchTerm;
    public string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; Search(); }
    }

    protected async Task Search()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        var query = gql.LearningPath(string.Empty, first: 10, offset: (page - 1) * 10, filter: string.IsNullOrEmpty(SearchTerm) ? null : new Gql_LearningPathFilter { OR = new List<Gql_LearningPathFilter> { new Gql_LearningPathFilter { Name_contains = SearchTerm } } }, orderBy: new[] { sorting }, fields: e => new GqlLearningPath
        {
            _id = e._id,
            Name = e.Name,
            Description = e.Description
        });

        learningPaths = await query.RunAsync();

        pages = 10;

        StateHasChanged();
    }


    private void OnPageChange()
    {
    }

    public void OnGridSort(SortEventArgs e)
    {
        switch (e.ColumnName)
        {
            case nameof(GqlLearningPath.Name):
                sorting = e.SortingAscending ? Gql_LearningPathOrdering.name_asc : Gql_LearningPathOrdering.name_desc;
                break;
        }
        Search();
    }

    protected void NewPath()
    {
        navigationManager.NavigateTo("/learning_path/-1");
    }

    public void EditPath()
    {
        if (grid.SelectedItem != null)
            navigationManager.NavigateTo("/learning_path/" + (grid.SelectedItem as GqlLearningPath)._id);
    }

    public void ConfirmDelete()
    {
        if (grid.SelectedItem != null)
        {
            string deleteItemName = (grid.SelectedItem as GqlLearningPath).Name;
            bool showModal = true;
            ModalService.ShowModal(showModal, deleteItemName);
        }
    }

    public async void DeletePath()
    {
        await gql.DeleteLearningPath(string.Empty, (grid.SelectedItem as GqlLearningPath).Name).RunAsync();
        ModalService.CloseModal();
        await Search();
    }
}
