@page "/logbook/{Id:int}"
@inject HttpClient httpClient
@using HCM.Client.Components
@inject NavigationManager navigationManager
@inject ModalService ModalService


    <form class="needs-validation">
        @if (logbook != null)
        {
            <div class="form-row">
                <div class="col">
                    <div class="form-group">
                        <label>To:</label>
                        <MultiSelect TItem="GqlEmployee" Placeholder="Type to Search" Items="Employees" Values="logbook.Is_to" DisplayFieldSelector="@(i => i.Name)" OnValueRemoved="@ToEmployeeRemoved" OnAddNewItem="@AddNewToEmployee" />
                    </div>
                </div>
                <div class="col">
                    <label for="txtSubject">Subject:</label>
                    <input id="txtSubject" type="text" class="form-control" placeholder="Enter a subject" @bind="logbook.Subject" />
                    <div class="invalid-feedback">
                        You must enter a subject
                    </div>
                </div>
            </div>
            <div class="form-row" style="z-index:0">
                <div class="col">
                    <label for="schProject">Project:</label>
                    <input id="schProject" type="search" class="form-control" placeholder="Project..." list="listamodelos" @bind="logbook.Project">
                    <div class="invalid-feedback">
                        You must enter a valid project
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="txtScope">Scope:</label>
                        <MultiSelect TItem="GqlScope" Placeholder="Type to Search" Items="scopes" DisplayFieldSelector="@(i => i.Name)" Values="logbook.Scopes" OnValueRemoved="@ScopesRemoved" OnAddNewItem="@AddNewScope" />
                    </div>
                </div>
            </div>
            <div class="form-row" style="z-index:-1">
                <div class="col">
                    <label for="dtpDate">Date:</label>
                    <input id="dtpDate" type="date" class="form-control" placeholder="Date" @bind="logbook.Date" />
                </div>
                <div class="col">
                    <label for="num_score">Score:</label>
                    <input id="num_score" type="number" class="form-control" min="0" max="10" @bind="logbook.Score" />
                </div>
            </div>
            <textarea placeholder="Description of the logbook" style="width:100%" @bind="logbook.Description"></textarea>
            <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s" @onclick="Save">Save</button>
            <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
        }

        <datalist id="listamodelos">
            @if (projects != null)
            {
                foreach (var project in projects)
                {
                    <option value="@project.Name" />
                }
            }
        </datalist>  
    </form>
@code {
    [Parameter]
    public int Id { get; set; }
    private GraphQLApiClient gql = null;
    private GqlLogbook logbook = null;
    private List<GqlEmployee> Employees;
    private List<GqlEmployee> RemovedEmployees;

    private List<GqlProject> projects;

    private List<GqlScope> scopes;
    private List<GqlScope> Removedscopes;

    protected override async Task OnInitializedAsync()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        if (Id > 0)
        {
            var query = gql.Logbook(string.Empty, _id: Id, fields: e => new GqlLogbook
            {
                Subject = e.Subject,
                Description = e.Description,
                Is_to = new List<GqlEmployee>
            {
                    new GqlEmployee
                    {
                        Name = e.Is_to[0].Name
                    }
                },
                Scopes = new List<GqlScope>
                {
                    new GqlScope
                    {
                        Name =e.Scopes[0].Name
                    }
                },
                Date = e.Date,
                Score = e.Score,
                Project = e.Project

            });

            logbook = (await query.RunAsync()).FirstOrDefault();
        }
        else
            logbook = new GqlLogbook();

        ////Load Employees
        Employees = await gql.Employee(string.Empty, fields: r => new GqlEmployee
        {
            _id = r._id,
            Name = r.Name
        }).RunAsync();

        RemovedEmployees = new List<GqlEmployee>();

        //Load Projecs
        projects = await gql.Project(string.Empty, fields: p => new GqlProject
        {
            _id = p._id,
            Name = p.Name
        }).RunAsync();

        scopes = await gql.Scope(string.Empty, fields: s => new GqlScope
        {
            _id = s._id,
            Name = s.Name
        }).RunAsync();
        Removedscopes = new List<GqlScope>();
    }

    public void ToEmployeeRemoved(GqlEmployee employee)
    {
        RemovedEmployees.Add(employee);
        logbook.Is_to.Remove(employee);
    }

    public void AddNewToEmployee(string text)
    {
        var newToemployee = new GqlEmployee { Name = text };
        Employees.Add(newToemployee);
        logbook.Is_to.Add(newToemployee);
    }

    public void ScopesRemoved(GqlScope scope)
    {    
        
        Removedscopes.Add(scope);
        logbook.Scopes.Remove(scope);
        Console.WriteLine(Removedscopes.Count);
    }

    public void AddNewScope(string text)
    {
        var newScope = new GqlScope { Name = text };
        scopes.Add(newScope);
        logbook.Scopes.Add(newScope);
    }

    public void Save()
    {
        // Save logbook
        gql.MergeLogbook(string.Empty, date: logbook.Date, description: logbook.Description, project: logbook.Project, score: logbook.Score, subject: logbook.Subject).RunAsync();
        SaveScopes();
        Cancel();
    }

    private void SaveScopes()
    {
        // Insert newly created scopes, if any
        foreach (var scope in scopes.Where(s => !s._id.HasValue))
            gql.CreateScope(string.Empty, scope.Name).RunAsync();

        // Save logbook scopes
        gql.AddLogbookScopes(string.Empty, subject: logbook.Subject, scopes: logbook.Scopes.Select(s => s.Name).ToArray()).RunAsync();

        //Delete removed scopes, if any
        var ScopesToRemove = Removedscopes.Select(s => s.Name).Except(logbook.Scopes.Select(es => es.Name));

        if (ScopesToRemove.Any())
            gql.DeleteLogbookScopes(string.Empty, subject: logbook.Subject, scopes: ScopesToRemove.ToArray()).RunAsync();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/logbooks");
    }
}
