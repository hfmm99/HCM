@page "/events"

@using HCM.Client.Components
@using HCM.Client.Components.Modals
@using HCM.Client.Components.Grid
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ModalService ModalService
@inject Blazored.SessionStorage.ISessionStorageService user_name

<DeleteModal OnDelete="@DeleteEvent" />
<div class="btn-toolbar row margin-btm-small" role="toolbar">
    <button type="button" class="btn btn-outline-primary mr-1" @onclick="NewEvent">
        <span class="oi oi-plus" />
        New
    </button>
    <button type="button" class="btn btn-outline-secondary mr-1" @onclick="EditEvent">
        <span class="oi oi-pencil" />
        Edit
    </button>
    <button type="button" class="btn btn-outline-danger mr-1" @onclick="ConfirmDelete">
        <span class="oi oi-x" />
        Delete
    </button>
</div>

<div class="row margin-btm-small">
    <SearchBox @bind-SearchTerm="SearchTerm" PlaceHolder="Search event..." />
</div>

<div class="row">
    <Grid @ref="grid" Data="@events" OnDoubleClick="@EditEvent" OnSort="@OnGridSort">
        <GridColumns>
            <GridColumn Field="@nameof(GqlEvents.Subject)" />
            <GridColumn Field="@nameof(GqlEvents.Date)" />
        </GridColumns>
    </Grid>
    <div class="mx-auto" style="width: 215px;">
        <Pager Pages="@pages" OnPageChange="OnPageChange" />
    </div>
</div>

@code {
        bool ShowPopup = false;
    private int page = 1;
    private int pages = 0;
    private Grid grid;
    private GraphQLApiClient gql = null;
    private List<GqlEvents> events = null;
    private Gql_EventsOrdering sorting = Gql_EventsOrdering.date_asc;

    protected override async Task OnInitializedAsync()
    {
        var name = await user_name.GetItemAsync<string>("name");

        if (name == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            await Search();
        }
    }

    void NewEvent()
    {
        navigationManager.NavigateTo("/event/" + -1);
    }

    private string searchTerm;
    public string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; Search(); }
    }

    protected async Task Search()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        var query = gql.Events(string.Empty, first: 10, offset: (page - 1) * 10, filter: string.IsNullOrEmpty(SearchTerm) ? null : new Gql_EventsFilter { OR = new List<Gql_EventsFilter> { new Gql_EventsFilter { Subject_contains = SearchTerm } } }, orderBy: new[] { sorting }, fields: e => new GqlEvents
        {
            _id = e._id,
            Subject = e.Subject,
            Date = e.Date
        });

        events = await query.RunAsync();

        pages = 10; // (await gql.EmployeeCount(string.Empty).RunAsync()).FirstOrDefault().Value;

        StateHasChanged();
    }

    public void OnPageChange(PageChangeEventArgs e)
    {
        page = e.Page;
        Search();
    }

    public void EditEvent()
    {
        if (grid.SelectedItem != null)
            navigationManager.NavigateTo("/event/" + (grid.SelectedItem as GqlEvents)._id);
    }

    public void OnGridSort(SortEventArgs e)
    {
        switch (e.ColumnName)
        {
            case nameof(GqlEvents.Subject):
                sorting = e.SortingAscending ? Gql_EventsOrdering.subject_asc : Gql_EventsOrdering.subject_desc;
                break;
            case nameof(GqlEvents.Date):
                sorting = e.SortingAscending ? Gql_EventsOrdering.date_asc : Gql_EventsOrdering.date_desc;
                break;
        }

        Search();
    }

    public void ConfirmDelete()
    {
        if (grid.SelectedItem != null)
        {
            string deleteItemName = (grid.SelectedItem as GqlEvents).Subject;
            bool showModal = true;
            ModalService.ShowModal(showModal, deleteItemName);
        }
    }

    public async void DeleteEvent()
    {
        gql.DeleteEvents(string.Empty, (grid.SelectedItem as GqlEvents).Subject).RunAsync();
        ModalService.CloseModal();
        await Search();
    }

}
