@page "/team/{Id:int}"
@using HCM.Client.Components
@inject HttpClient httpClient
@inject NavigationManager navigationManager

    <form class="needs-validation">
        @if (team != null)
        {
            <div class="form-group">
                <label for="txtName">Name</label>
                <input id="txtName" type="text" class="form-control" placeholder="Enter team's name" @bind="team.Name" required autofocus />
                <div class="invalid-feedback">
                    You must enter a name.
                </div>
            </div>
            <div class="form-group">
                <label>Members:</label>
                <MultiSelect TItem="GqlEmployee" Placeholder="Select Team's Members" Items="Employees" Values="team.Members" DisplayFieldSelector="@(i => i.Name)" />
            </div>
            <div class="form-group">
                <table class="table table-bordered table-hover table-striped">
                    <thead>
                        <tr class="text--vertMiddle">
                            <th>Role</th>
                            <th>Employees Required</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var role in rolesRequired)
                        {
                            if (role._id != Id)
                            {
                                <tr class="text--vertMiddle">
                                    <td class="table_td required_role text--vertMiddle">@role.Name</td>
                                    <td><input class="table_td required_amount text--vertMiddle" type="number" placeholder="0" /></td>
                                </tr>
                            }
                        }
                        <tr class="text--vertMiddle">
                            <td class="table_td required_role text--vertMiddle bg--lightBlue hover--shine">+Add new required role</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="form-group">
                <table class="table table-bordered table-hover table-striped">
                    <thead>
                        <tr class="text--vertMiddle">
                            <th>Experiences required in this team</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var exp in experiencesRequired)
                        {
                                <tr class="text--vertMiddle">
                                    <td class="table_td required_experience text--vertMiddle">@exp.Name</td>
                                </tr>
                        }
                        <tr class="text--vertMiddle">
                            <td class="table_td required_experience text--vertMiddle bg--lightBlue hover--shine">+Add new required experience</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s" @onclick="Save">Save</button>
            <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
        }
    </form>

@code{

    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private GqlTeam team = null;

    private List<GqlRole> rolesRequired = null;
    private List<GqlExperience> experiencesRequired = null;
    private List<GqlEmployee> Employees;

    protected override async Task OnInitializedAsync()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        if (Id > 0)
        {
            var query = gql.Team(string.Empty, _id: Id, fields: e => new GqlTeam
            {
                _id = e._id,
                Name = e.Name,
            });

            team = (await query.RunAsync()).FirstOrDefault();
            team.Members = new List<GqlEmployee>();
        }
        else
            team = new GqlTeam();

        //Load Employees
        Employees = await gql.Employee(string.Empty, fields: e => new GqlEmployee
        {
            _id = e._id,
            Name = e.Name
        }).RunAsync();

        rolesRequired = await gql.Role(string.Empty, fields: e => new GqlRole
        {
            _id = e._id,
            Name = e.Name
        }).RunAsync();

        experiencesRequired = await gql.Experience(string.Empty, first:5, fields: e => new GqlExperience
        {
            _id = e._id,
            Name = e.Name
        }).RunAsync();
    }

    public void Save()
    {
        gql.MergeTeam(string.Empty, team.Name).RunAsync();
        Cancel();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/teams");
    }

    public void NewExperience()
    {
        navigationManager.NavigateTo("/experience/" + -1);
    }
}