@page "/team/{Id:int}"
@using HCM.Client.Components
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService user_name

<form class="needs-validation">
    @if (team != null)
    {
        <div class="form-group">
            <label for="txtName">Name:</label>
            <input id="txtName" type="text" class="form-control" placeholder="Enter team's name" @bind="team.Name" required autofocus />
            <div class="invalid-feedback">
                You must enter a name.
            </div>
        </div>
        <!--Load team members-->
        <div class="form-group">
            <label>Members:</label>
            <MultiSelect TItem="GqlEmployee" Placeholder="Select Team's Members" Items="Employees" Values="team.Members" DisplayFieldSelector="@(i => i.Name)" OnValueRemoved="@EmployeeRemoved" />
        </div>
        <div class="form-group">
            <label>Experience:</label>
            <MultiSelect TItem="GqlExperience" Placeholder="Enter Team's Experience" Items="Experiences" Values="team.Exp_requeres" DisplayFieldSelector="@(i => i.Name)" OnValueRemoved="@ExperienceRemoved" OnAddNewItem="@AddNewExperience" />
        </div>
        <div class="form-group">
            <label>Works on:</label>
            <MultiSelect TItem="GqlProject" Placeholder="Works on Projects" Items="Projects" Values="team.WorksOn" DisplayFieldSelector="@(i => i.Name)" OnValueRemoved="@ProjectRemoved" OnAddNewItem="@AddNewProject" />
        </div>

        <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s" @onclick="Save">Save</button>
        <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
    }
</form>

@code{

    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private GqlTeam team = null;

    private List<GqlRole> rolesRequired = null;

    private List<GqlEmployee> Employees;
    private List<GqlEmployee> RemovedEmployees;

    private List<GqlExperience> Experiences;
    private List<GqlExperience> RemovedExperiences;

    private List<GqlProject> Projects;
    private List<GqlProject> RemovedProjects;

    protected override async Task OnInitializedAsync()
    {
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");

        if (user_name_session == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

            if (Id > 0)
            {
                var query = gql.Team(string.Empty, _id: Id, fields: e => new GqlTeam
                {
                    _id = e._id,
                    Name = e.Name,
                    Members = new List<GqlEmployee>
                    {
                        new GqlEmployee{ Name = "" }
                    },
                    Exp_requeres = new List<GqlExperience>
            {
                        new GqlExperience { Name = "" }
                    },
                    WorksOn = new List<GqlProject>
            {
                        new GqlProject { Name = "" }
                    }
                });

                team = (await query.RunAsync()).FirstOrDefault();
            }
            else
                team = new GqlTeam { Members = new List<GqlEmployee>(), Exp_requeres = new List<GqlExperience>(), WorksOn = new List<GqlProject>()};

            //Load Employees
            Employees = await gql.Employee(string.Empty, fields: e => new GqlEmployee
            {
                _id = e._id,
                Name = e.Name
            }).RunAsync();

            //Load roles
            rolesRequired = await gql.Role(string.Empty, fields: e => new GqlRole { _id = e._id, Name = e.Name }).RunAsync();

            //Load Exp
            Experiences = await gql.Experience(string.Empty, fields: e => new GqlExperience { _id = e._id, Name = e.Name }).RunAsync();
            RemovedExperiences = new List<GqlExperience>();

            //Load Projects
            Projects = await gql.Project(string.Empty, fields: p => new GqlProject { _id = p._id, Name = p.Name }).RunAsync();
            RemovedProjects = new List<GqlProject>();

            RemovedEmployees = new List<GqlEmployee>();
            RemovedExperiences = new List<GqlExperience>();
            RemovedProjects = new List<GqlProject>();
        }
    }

    public async void Save()
    {
        await gql.MergeTeam(string.Empty, team.Name).RunAsync();
        SaveEmployees();
        SaveExperiences();
        SaveProjects();
        Cancel();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/teams");
    }

    public void EmployeeRemoved(GqlEmployee employee)
    {
        RemovedEmployees.Add(employee);
        team.Members.Remove(employee);
    }

    public void AddNewExperience(string text)
    {
        var newExperience = new GqlExperience { Name = text };
        Experiences.Add(newExperience);
        team.Exp_requeres.Add(newExperience);
    }

    public void ExperienceRemoved(GqlExperience experience)
    {
        RemovedExperiences.Add(experience);
        team.Exp_requeres.Remove(experience);
    }

    public void AddNewProject(string text)
    {
        var newProject = new GqlProject { Name = text };
        Projects.Add(newProject);
        team.WorksOn.Add(newProject);
    }

    public void ProjectRemoved(GqlProject project)
    {
        RemovedProjects.Add(project);
        team.WorksOn.Remove(project);
    }

    private async void SaveEmployees()
    {
        // Save team employees
        await gql.AddTeamMembers(string.Empty, name: team.Name, members: team.Members.Select(s => s.Name).ToArray()).RunAsync();

        // Delete removed employees, if any
        var membersToRemove = RemovedEmployees.Select(s => s.Name).Except(team.Members.Select(es => es.Name));

        if (membersToRemove.Any())
        await gql.DeleteTeamMembers(string.Empty, name: team.Name, members: membersToRemove.ToArray()).RunAsync();
    }

    private async void SaveExperiences()
    {
        // Insert newly created experiences, if any
        foreach (var experience in Experiences.Where(s => !s._id.HasValue))
        await gql.CreateExperience(string.Empty, experience.Name).RunAsync();

        // Save team needed exp
        await gql.AddTeamExp_requeres(string.Empty, name: team.Name, exp_requeres: team.Exp_requeres.Select(s => s.Name).ToArray()).RunAsync();

        // Delete removed experiences, if any
        var experiencesToRemove = RemovedExperiences.Select(s => s.Name).Except(team.Exp_requeres.Select(es => es.Name));

        if (experiencesToRemove.Any())
        await gql.DeleteTeamExp_requeres(string.Empty, name: team.Name, exp_requeres: experiencesToRemove.ToArray()).RunAsync();
    }

    private async  void SaveProjects()
    {
        // Insert newly created projects, if any
        foreach (var project in Projects.Where(s => !s._id.HasValue))
        await gql.CreateProject(string.Empty, project.Name).RunAsync();

        // Save team needed exp
        await gql.AddTeamWorksOn(string.Empty, name: team.Name, worksOn: team.WorksOn.Select(s => s.Name).ToArray()).RunAsync();

        // Delete removed projects, if any
        var projectsToRemove = RemovedProjects.Select(s => s.Name).Except(team.WorksOn.Select(es => es.Name));

        if (projectsToRemove.Any())
        await gql.DeleteTeamWorksOn(string.Empty, name: team.Name, worksOn: projectsToRemove.ToArray()).RunAsync();
    }
}