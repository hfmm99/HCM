@page "/team/{Id:int}"
@using HCM.Client.Components
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<form class="needs-validation">
    @if (team != null)
    {
        <div class="form-group">
            <label for="txtName">Name</label>
            <input id="txtName" type="text" class="form-control" placeholder="Enter team's name" @bind="team.Name" required autofocus />
            <div class="invalid-feedback">
                You must enter a name.
            </div>
        </div>
        <!--Load team members-->
        <div class="form-group">
            <label>Members:</label>
            <MultiSelect TItem="GqlEmployee"  Placeholder="Select Team's Members" Items="Employees" Values="team.Members" DisplayFieldSelector="@(i => i.Name)" />
        </div>
        <div class="form-group">
            <label>Needed experience :</label>
            <MultiSelect TItem="GqlExperience" Placeholder="Type to Search" Items="Experiences" Values="team.Exp_requeres" DisplayFieldSelector="@(i => i.Name)" OnValueRemoved="@ExperienceRemoved" OnAddNewItem="@AddNewExperience" />
        </div>

        <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s" @onclick="Save">Save</button>
        <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
    }
</form>

@code{

    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private GqlTeam team = null;

    private List<GqlRole> rolesRequired = null;
    private List<GqlEmployee> Employees;

    private List<GqlExperience> Experiences;
    private List<GqlExperience> RemovedExperiences;

    protected override async Task OnInitializedAsync()
    {
        var name = await sessionStorage.GetItemAsync<string>("name");

        if (name == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

            if (Id > 0)
            {
                var query = gql.Team(string.Empty, _id: Id, fields: e => new GqlTeam
                {
                    _id = e._id,
                    Name = e.Name,
                    Exp_requeres = new List<GqlExperience>
            {
                    new GqlExperience
                    {
                        Name = e.Exp_requeres[0].Name
                    }
                }
                });

                team = (await query.RunAsync()).FirstOrDefault();
                team.Members = new List<GqlEmployee>();
            }
            else
                team = new GqlTeam();

            //Load Employees
            Employees = await gql.Employee(string.Empty, fields: e => new GqlEmployee
            {
                _id = e._id,
                Name = e.Name
            }).RunAsync();

            //Load roles
            rolesRequired = await gql.Role(string.Empty, fields: e => new GqlRole
            {
                _id = e._id,
                Name = e.Name
            }).RunAsync();

            //Load Exp
            Experiences = await gql.Experience(string.Empty, fields: e => new GqlExperience
            {
                _id = e._id,
                Name = e.Name
            }).RunAsync();
            RemovedExperiences = new List<GqlExperience>();
        }
    }

    public void Save()
    {
        gql.MergeTeam(string.Empty, team.Name).RunAsync();
        SaveExperiences();
        Cancel();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/teams");
    }

    public void AddNewExperience(string text)
    {
        var newExperience = new GqlExperience { Name = text };
        Experiences.Add(newExperience);
        team.Exp_requeres.Add(newExperience);
    }

    public void ExperienceRemoved(GqlExperience experience)
    {
        RemovedExperiences.Add(experience);
        team.Exp_requeres.Remove(experience);
        Console.WriteLine(RemovedExperiences.Count);
    }

    private void SaveExperiences()
    {
        // Insert newly created experiences, if any
        foreach (var experience in Experiences.Where(s => !s._id.HasValue))
            gql.CreateExperience(string.Empty, experience.Name).RunAsync();

        // Save team needed exp
        gql.AddTeamExp_requeres(string.Empty, name: team.Name, exp_requeres: team.Exp_requeres.Select(s => s.Name).ToArray()).RunAsync();

        // Delete removed experiences, if any
        var experiencesToRemove = RemovedExperiences.Select(s => s.Name).Except(team.Exp_requeres.Select(es => es.Name));

        if (experiencesToRemove.Any())
            gql.DeleteTeamExp_requeres(string.Empty, name: team.Name, exp_requeres: experiencesToRemove.ToArray()).RunAsync();
    }
}