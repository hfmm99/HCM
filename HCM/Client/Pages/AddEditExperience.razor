@page "/experience/{Id:int}"
@using HCM.Client.Components
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService user_name


<form class="needs-validation">
    @if (experience != null)
    {
        <div class="form-group">
            <label for="txtName">Name</label>
            <input id="txtName" type="text" class="form-control" placeholder="Enter experience's name" @bind="experience.Name" required autofocus />
            <div class="invalid-feedback">
                You must enter a name.
            </div>
        </div>
        <div class="form-group">
            <label>Employees with this Experience:</label>
            <ul class="list-group d-flex flex-row flex-wrap">
                @foreach (var emp in experience.Employees.OrderBy(e => e.Name))
                {
                    <li class="list-group-item list-group-item-info p-1 w-25">
                        <a href="/employee/@emp._id">@emp.Name</a>
                    </li>
                }
            </ul>
        </div>
        <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s" @onclick="Save">Save</button>
        <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
    }
</form>

@code
{
    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private GqlExperience experience = null;

    protected override async Task OnInitializedAsync()
    {
        var name = await user_name.GetItemAsync<string>("name");

        if (name == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

            if (Id > 0)
            {
                var query = gql.Experience(string.Empty, _id: Id, fields: s => new GqlExperience
                {
                    _id = s._id,
                    Name = s.Name,
                    Employees = new List<GqlEmployee>
{
                    new GqlEmployee { _id = s.Employees[0]._id, Name = s.Employees[0].Name }
            }
                });
                experience = (await query.RunAsync()).FirstOrDefault();
            }
            else
                experience = new GqlExperience
                {
                    Employees = new List<GqlEmployee>()
                };
        }
    }

    public void Save()
    {
        gql.MergeExperience(string.Empty, experience.Name).RunAsync();
        Cancel();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/experiences");
    }
}