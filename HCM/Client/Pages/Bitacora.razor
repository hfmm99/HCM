@page "/bitacora"

@using HCM.Client.Components
@using HCM.Client.Components.Modals
@using HCM.Client.Components.Grid
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ModalService ModalService
@*<Bitacora_Modal />*@
<div class="btn-toolbar row margin-btm-small" role="toolbar">
    <button type="button" class="btn btn-outline-primary mr-1" @onclick="NewLogbook">
        <span class="oi oi-plus" />
        New
    </button>
    <button type="button" class="btn btn-outline-secondary mr-1">
        <span class="oi oi-pencil" />
        Edit
    </button>
    <button type="button" class="btn btn-outline-danger mr-1">
        <span class="oi oi-x" />
        Delete
    </button>
</div>

<div class="row margin-btm-small">
    <SearchBox @bind-SearchTerm="SearchTerm" PlaceHolder="Search Employee..." />
</div>

<div class="row">
    <Grid @ref="grid" Data="@logbooks" OnDoubleClick="@EditLogbook">
        <GridColumns>
            <GridColumn Field="@nameof(GqlLogbook.Subject)" />
            <GridColumn Field="@nameof(GqlLogbook.Description)" />
        </GridColumns>
    </Grid>
    <div class="mx-auto" style="width: 215px;">
        <Pager Pages="@pages" OnPageChange="OnPageChange" />
    </div>
</div>

@code {
    bool ShowPopup = false;
    private int page = 1;
    private int pages = 0;
    private Grid grid;
    private GraphQLApiClient gql = null;
    private List<GqlLogbook> logbooks = null;
    private Gql_EmployeeOrdering sorting = Gql_EmployeeOrdering.name_asc;

     protected override async Task OnInitializedAsync()
        {
            await Search();
        }

    void NewLogbook()
    {
        navigationManager.NavigateTo("/logbook/" + -1);
    }

    private string searchTerm;
    public string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; Search(); }
    }

      protected async Task Search()
        {
            gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

            var query = gql.Logbook(string.Empty, fields: e => new GqlLogbook
            {
                _id = e._id,
                Subject = e.Subject,
                Description = e.Description
            });

            logbooks = await query.RunAsync();

            pages = 10; // (await gql.EmployeeCount(string.Empty).RunAsync()).FirstOrDefault().Value;

            StateHasChanged();
        }

    public void OnPageChange(PageChangeEventArgs e)
        {
            page = e.Page;
            Search();
        }

    public void EditLogbook()
        {
            if (grid.SelectedItem != null)
                navigationManager.NavigateTo("/logbook/" + (grid.SelectedItem as GqlLogbook)._id);
        }

}
