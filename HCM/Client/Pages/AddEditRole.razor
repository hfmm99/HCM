@page "/role/{Id:int}"
@using HCM.Client.Components
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService user_name


<form class="needs-validation">
    @if (role != null)
    {
        <div class="form-group">
            <label for="txtName">Name</label>
            <input id="txtName" type="text" class="form-control" placeholder="Enter role's name" @bind="role.Name" required autofocus />
            <div class="invalid-feedback">
                You must enter a name.
            </div>
        </div>
        <!--Load role members-->
        <div class="form-group" style="z-index: 0;">
            <label>Employee's in this role:</label>
            <MultiSelect TItem="GqlEmployee" Placeholder="Select Team's Members" Items="Employees" Values="role.Employees" DisplayFieldSelector="@(i => i.Name)" />
        </div>
        <!--Load previou roles-->
        <div class="form-group" style="z-index: 2;">
            <label>Previous roles:</label>
            <ul class="list-group d-flex flex-row flex-wrap">
                @foreach (var role in previousRoles)
                {
                    if (role._id != Id)
                    {
                        <li class="list-group-item list-group-item-info text--vertMiddle p-1 w-25">
                            <span class="table_td" style="width:100%;min-width:100%;">@role.Name</span>
                            <button type="button" class="close eliminate_previousRole" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </li>
                    }
                }
            </ul>
        </div>
        <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s" @onclick="Save">Save</button>
        <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
    }
</form>

@code
{
    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private GqlRole role = null;

    private List<GqlRole> previousRoles;
    private List<GqlEmployee> Employees;

    protected override async Task OnInitializedAsync()
    {
        var user_name_session = await user_name.GetItemAsync<string>("user_name_session");

        if (user_name_session == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

            if (Id > 0)
            {
                var query = gql.Role(string.Empty, _id: Id, fields: e => new GqlRole
                {
                    _id = e._id,
                    Name = e.Name,
                });

                role = (await query.RunAsync()).FirstOrDefault();
                role.Employees = new List<GqlEmployee>();
            }
            else
                role = new GqlRole { Employees =new List<GqlEmployee>()};

            //Load Employees
            Employees = await gql.Employee(string.Empty, fields: e => new GqlEmployee
            {
                _id = e._id,
                Name = e.Name
            }).RunAsync();

            previousRoles = await gql.Role(string.Empty, fields: e => new GqlRole
            {
                _id = e._id,
                Name = e.Name
            }).RunAsync();
        }
    }

    public async void Save()
    {
       await gql.MergeRole(string.Empty, role.Name).RunAsync();
       Cancel();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/roles");
    }
}