@page "/login"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ModalService ModalService


@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <div class="container">
            <div class="box">
                <div class="path_info_space">
                    <div class="pre_box">
                        <div class="text-center mb-4">
                            <img class="mb-4" src="/Images/logo-ex2.png" width="300" height="150">
                            <h1 class="h3 mb-3 font-weight-normal">CAREER PATH</h1>
                        </div>
                        <div style="width:60%; align-content:center; margin: 0 auto">
                        <div class="form-label-group">
                            <input type="text" name="txt_User" id="inputUser" class="form-control" placeholder="User ID" @bind="Input_user" required autofocus>
                        </div>
                        <br />
                        <div class="form-label-group">
                            <input type="password" name="txt_Pass" id="inputPassword" class="form-control" placeholder="Password" @bind="Input_password" required>
                        </div>
                        <br />
                        <div class="checkbox mb-3">
                            <label>
                                <input type="checkbox" value="remember-me"> Remember me
                            </label>
                        </div>
                        <button class="btn btn-lg btn-primary btn-block" @onclick="LogUsername">Sign in</button>
                        </div>
                    </div>
                    </div>
                </div>
            </div>
</NotAuthorized>
</AuthorizeView>

@code {
    private GraphQLApiClient gql = null;
    private GqlEmployee employee = null;

    public string Input_user { get; set; }
    public string Input_password { get; set; }


    //public async Task Login_user()
    //{
    //    gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");
    //    var query = gql.Employee(string.Empty, _user: Input_user, fields: e => new GqlEmployee
    //    {
    //        _id = e._id,
    //        _user = e._user,
    //        _password = e._password,
    //        Name = e.Name

    //    });

    //    employee = (await query.RunAsync()).FirstOrDefault();
    //    if (employee._user == Input_user && employee._password == Input_password)
    //    {

    //        navigationManager.NavigateTo("/");

    //    }
    //    else
    //        Console.WriteLine("Mal");
    //}

    private async Task LogUsername()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            Console.WriteLine($"{user.Identity.Name} is authenticated.");
        }
        else
        {
            Console.WriteLine("The user is NOT authenticated.");
        }
    }

    public async Task Login_user()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");
        var query = gql.Employee(string.Empty, _user: Input_user, fields: e => new GqlEmployee
        {
            _id = e._id,
            _user = e._user,
            _password = e._password,
            Name = e.Name

        });

        employee = (await query.RunAsync()).FirstOrDefault();
        if (employee._user == Input_user && employee._password == Input_password)
        {

            navigationManager.NavigateTo("/");

        }
        else
            Console.WriteLine("Mal");
    }
}
