@page "/employee/{Id:int}"
@using HCM.Client.Components
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<form class="needs-validation">

    @if (employee != null)
    {
        <div class="form-group">
            <label for="txtName">Name</label>
            <input id="txtName" type="text" class="form-control" placeholder="Enter employee's name" @bind="employee.Name" required autofocus />
            <div class="invalid-feedback">
                You must enter a name.
            </div>
        </div>
        <div class="form-group">
            <label for="txtEmail">Email</label>
            <input id="txtEmail" type="email" class="form-control" placeholder="Enter employee's email" @bind="employee.Email" required />
            <div class="invalid-feedback">
                You must enter a valid email.
            </div>
        </div>
        <div class="form-group">
            <div>Gender</div>
            <label class="radio-inline">
                <input type="radio" name="rbGender" />
                Male
            </label>
            <label class="radio-inline">
                <input type="radio" name="rbGender" />
                Female
            </label>
        </div>
        <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s" @onclick="Save">Save</button>
        <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
    }
</form>

@code
{
    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private GqlEmployee employee = null;
    private int create;

    protected override async Task OnInitializedAsync()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        if (Id > 0)
        {
            var query = gql.Employee(string.Empty, _id: Id, fields: e => new GqlEmployee
            {
                _id = e._id,
                Name = e.Name,
                Email = e.Email
            });

            employee = (await query.RunAsync()).FirstOrDefault();
        }
        else
            employee = new GqlEmployee();
    }

    public void Save()
    {
        gql.MergeEmployee(string.Empty, employee.Name, employee.Email).RunAsync();
        Cancel();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/employees");
    }
}