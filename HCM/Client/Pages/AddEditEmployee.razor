@page "/employee/{Id:int}"
@using HCM.Client.Components
@using HCM.Client.Components.Modals
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ModalService ModalService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<RolePropertiesModal />

<form class="needs-validation">

    @if (employee != null)
    {
        <div class="hovereffect">
            @if (employee.Image == null)
            {
                <div class="img-thumbnail" style="width: 100px;" />
            }
            else
            {
                <img src="/Images/@employee.Image" alt="@employee.Name" class="img-thumbnail img-responsive" />
            }
            <a class="info" href="#">Change Image</a>
        </div>

        <div class="form-row">
            <div class="col">
                <label for="txtName">Name:</label>
                <input id="txtName" type="text" class="form-control" placeholder="Enter employee's name" @bind="employee.Name" required autofocus />
                <div class="invalid-feedback">
                    You must enter a name.
                </div>
            </div>
            <div class="col">
                <label for="txtPhone">Phone:</label>
                <input id="txtPhone" type="tel" class="form-control" placeholder="Enter employee's phone" @bind="employee.Phone" />
                <div class="invalid-feedback">
                    You must enter a valid phone.
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="txtEmail">Email:</label>
                <input id="txtEmail" type="email" class="form-control" placeholder="Enter employee's email" @bind="employee.Email" />
                <div class="invalid-feedback">
                    You must enter a valid email.
                </div>
            </div>
            <div class="col">
                <label for="dtpDateOfBirth">Date of Birth:</label>
                <input id="dtpDateOfBirth" type="date" class="form-control" placeholder="Enter employee's email" @bind="employee.DateOfBirth" />
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                Gender:
                <div class="custom-control custom-radio custom-control-inline">
                    <input type="radio" id="rbMale" name="rbGender" class="custom-control-input" checked='@(employee.Gender == "M")' @onchange='(() => employee.Gender = "M")' />
                    <label for="rbMale" class="custom-control-label">Male</label>
                </div>
                <div class="custom-control custom-radio custom-control-inline">
                    <input type="radio" id="rbFemale" name="rbGender" class="custom-control-input" checked='@(employee.Gender == "F")' @onchange='(() => employee.Gender = "F")' />
                    <label for="rbFemale" class="custom-control-label">Female</label>
                </div>
            </div>
        </div>
        <!--User and pass-->
        <div class="form-row">
            <div class="col">
                <label for="lblUser">User:</label>
                <input id="txtUser" type="text" class="form-control" placeholder="User" @bind="employee.User" required autofocus />
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="lblPass">Password:</label>
                <input id="txtPass" type="password" class="form-control" placeholder="Password" @bind="employee.Password" required autofocus />
            </div>
        </div>
        <div class="form-group">
            <label>Employee's experience:</label>
            <MultiSelect TItem="GqlExperience" Placeholder="Type to Search" Items="Experiences" Values="employee.Experience" DisplayFieldSelector="@(i => i.Name)" OnValueRemoved="@ExperienceRemoved" OnAddNewItem="@AddNewExperience" />
        </div>
        <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s" @onclick="Save">Save</button>
        <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
    }
</form>

@code
{
    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private GqlEmployee employee = null;

    private List<GqlExperience> Experiences;
    private List<GqlExperience> RemovedExperiences;

    protected override async Task OnInitializedAsync()
    {
        var name = await sessionStorage.GetItemAsync<string>("name");

        if (name == null)
        {
            navigationManager.NavigateTo("/login");
        }
        else
        {
            gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

            if (Id > 0)
            {
                var query = gql.Employee(string.Empty, _id: Id, fields: e => new GqlEmployee
                {
                    _id = e._id,
                    Name = e.Name,
                    Gender = e.Gender,
                    Phone = e.Phone,
                    Email = e.Email,
                    Image = e.Image,
                    DateOfBirth = e.DateOfBirth,
                    Experience = new List<GqlExperience>
                {
                new GqlExperience
                {
                    Name = e.Experience[0].Name
                }
                 },
                    Password = e.Password,
                    User = e.User

                });

                employee = (await query.RunAsync()).FirstOrDefault();
            }
            else
                employee = new GqlEmployee();

            ////Load Experiences
            Experiences = await gql.Experience(string.Empty, fields: r => new GqlExperience
            {
                _id = r._id,
                Name = r.Name
            }).RunAsync();

            RemovedExperiences = new List<GqlExperience>();
        }
    }

    public void ChangeImage()
    {
    }

    public void Save()
    {
        // Save Employee
        gql.MergeEmployee(string.Empty, name: employee.Name, dateOfBirth: employee.DateOfBirth, email: employee.Email, gender: employee.Gender, phone: employee.Phone, user: employee.User, password: employee.Password).RunAsync();

        SaveExperiences();
        Cancel();
    }

    private void SaveExperiences()
    {
        // Insert newly created experiences, if any
        foreach (var experience in Experiences.Where(s => !s._id.HasValue))
            gql.CreateExperience(string.Empty, experience.Name).RunAsync();
        Console.WriteLine("cree nueva");

        // Save employee experiences
        gql.AddEmployeeExperience(string.Empty, name: employee.Name, experience: employee.Experience.Select(s => s.Name).ToArray()).RunAsync();
        Console.WriteLine("Salve exp");

        // Delete removed experiences, if any
        var experiencesToRemove = RemovedExperiences.Select(s => s.Name).Except(employee.Experience.Select(es => es.Name));
        if (experiencesToRemove.Any())
            gql.DeleteEmployeeExperience(string.Empty, name: employee.Name, experience: experiencesToRemove.ToArray()).RunAsync();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/employees");
    }

    public void AddNewExperience(string text)
    {
        var newExperience = new GqlExperience { Name = text };
        Experiences.Add(newExperience);
        employee.Experience.Add(newExperience);
    }

    public void ExperienceRemoved(GqlExperience experience)
    {
        RemovedExperiences.Add(experience);
        employee.Experience.Remove(experience);
    }
}
