@page "/employee/{Id:int}"
@using HCM.Client.Components
@using HCM.Client.Components.Modals
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ModalService ModalService

<RolePropertiesModal/>

<form class="needs-validation">

    @if (employee != null)
    {
        <div class="hovereffect">
            @if (employee.Image == null)
            {
                <div class="img-thumbnail" style="width: 100px;" />
            }
            else
            {
                <img src="/Images/@employee.Image" alt="@employee.Name" class="img-thumbnail img-responsive" />
            }
            <a class="info" href="#">Change Image</a>
        </div>

        <div class="form-row">
            <div class="col">
                <label for="txtName">Name:</label>
                <input id="txtName" type="text" class="form-control" placeholder="Enter employee's name" @bind="employee.Name" required autofocus />
                <div class="invalid-feedback">
                    You must enter a name.
                </div>
            </div>
            <div class="col">
                <label for="txtPhone">Phone:</label>
                <input id="txtPhone" type="tel" class="form-control" placeholder="Enter employee's phone" @bind="employee.Phone" />
                <div class="invalid-feedback">
                    You must enter a valid phone.
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                <label for="txtEmail">Email:</label>
                <input id="txtEmail" type="email" class="form-control" placeholder="Enter employee's email" @bind="employee.Email" />
                <div class="invalid-feedback">
                    You must enter a valid email.
                </div>
            </div>
            <div class="col">
                <label for="dtpDateOfBirth">Date of Birth:</label>
                <input id="dtpDateOfBirth" type="date" class="form-control" placeholder="Enter employee's email" @bind="employee.DateOfBirth" />
            </div>
        </div>
        <div class="form-row">
            <div class="col">
                Gender:
                <div class="custom-control custom-radio custom-control-inline">
                    <input type="radio" id="rbMale" name="rbGender" class="custom-control-input" checked='@(employee.Gender == "M")' @onchange='(() => employee.Gender = "M")' />
                    <label for="rbMale" class="custom-control-label">Male</label>
                </div>
                <div class="custom-control custom-radio custom-control-inline">
                    <input type="radio" id="rbFemale" name="rbGender" class="custom-control-input" checked='@(employee.Gender == "F")' @onchange='(() => employee.Gender = "F")' />
                    <label for="rbFemale" class="custom-control-label">Female</label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label>Roles:</label>
            <MultiSelect Placeholder="Select Employee's Roles" Items="Roles" DisplayFieldSelector="@(i => i.Name)" OnAddedRoleRelation="@AddedRoleRelation" OnNewRoleAdded="@NewRoleAdded" OnRemoveRole="@RemoveRole"/>
        </div>
        <button class="btn btn-primary underline-first-letter" type="submit" accesskey="s" @onclick="Save">Save</button>
        <button class="btn btn-secondary underline-first-letter" accesskey="c" @onclick="Cancel">Cancel</button>
    }
</form>

@code
{
    [Parameter]
    public int Id { get; set; }

    private GraphQLApiClient gql = null;
    private GqlEmployee employee = null;

    private List<GqlRole> Roles;

    protected override async Task OnInitializedAsync()
    {
        gql = new GraphQLApiClient(httpClient, "http://localhost:7474/graphql/");

        if (Id > 0)
        {
            var query = gql.Employee(string.Empty, _id: Id, fields: e => new GqlEmployee
            {
                _id = e._id,
                Name = e.Name,
                Gender = e.Gender,
                Phone = e.Phone,
                Email = e.Email,
                Image = e.Image,
                DateOfBirth = e.DateOfBirth
            });

            employee = (await query.RunAsync()).FirstOrDefault();
        }
        else
            employee = new GqlEmployee();

        //Load Roles
        Roles = await gql.Role(string.Empty, fields: r => new GqlRole
        {
            _id = r._id,
            Name = r.Name
        }).RunAsync();
    }

    public void ChangeImage()
    {
    }

    public void Save()
    {
        gql.MergeEmployee(string.Empty, employee.Name, employee.DateOfBirth, employee.Email, employee.Gender, phone: employee.Phone).RunAsync();
        Cancel();
    }

    public void Cancel()
    {
        navigationManager.NavigateTo("/employees");
    }

    public void AddedRoleRelation()
    {
        bool showModal = true;
        ModalService.ShowRolePropertiesModal(showModal);
    }

    public void NewRoleAdded()
    {
        Console.WriteLine("New role added");
    }

    public void RemoveRole()
    {
        Console.WriteLine("Removing role");
    }
}