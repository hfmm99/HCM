type Employee {
  name: ID!
  email: String
  dateOfBirth: String
  isMemberOf: [Team] @relation(name: "IS_MEMBER_OF", direction: out)
  worksAs: [Role] @relation(name: "WOKS_AS", direction: out)
  worksFor: Client @relation(name: "WOKS_FOR", direction: out)
  livesIn: Country @relation(name: "LIVES_IN", direction: out)
}

type Team {
  name: ID!
  roles: [Role] @relation(name: "REQUIRES", direction: out)
  members: [Employee] @relation(name: "IS_MEMBER_OF", direction: in)
}

type Role {
  name: ID!
  employees: [Employee] @relation(name: "WOKS_AS", direction: in)
  isRequiredBy: [Team] @relation(name: "REQUIRES", direction: in)
}

type Country {
  name: ID!
  employees: [Employee] @relation(name: "LIVES_IN", direction: in)
}

type Client {
  name: ID!
  employees: [Employee] @relation(name: "WORKS_FOR", direction: in)
}

type Counts {
  Employees: Int
    @cypher(statement: "MATCH (e:Employee) RETURN COUNT(e) AS Employees"),
  Teams: Int
    @cypher(statement: "MATCH (t:Team) RETURN COUNT(t) AS Teams"),
  Roles: Int
    @cypher(statement: "MATCH (r:Role) RETURN COUNT(r) AS Roles")
}